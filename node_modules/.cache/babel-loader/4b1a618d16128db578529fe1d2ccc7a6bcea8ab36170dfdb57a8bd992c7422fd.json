{"ast":null,"code":"var _jsxFileName = \"/Users/krupachovatiya/Desktop/react/my_app/src/UseRefHook.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UseRefHook = () => {\n  _s();\n  // let inputRef = useRef(null)\n\n  // const handleClick = () => {\n  //     console.log('useRef call')\n\n  //     inputRef.current.value = '1000'\n  // inputRef.current.focus()\n  // inputRef.current.style.color = 'red'\n  // inputRef.current.style.display = 'none'\n  // }\n\n  // return (\n  //     <div>\n  //         <input type='text' ref={inputRef}/>\n  //         <button onClick={handleClick}>Update</button>\n  //     </div>\n  // )\n\n  // const [count, setCount] = useState(0);\n  // let prevCountRef = useRef()\n\n  // useEffect(() => {\n  //     console.log('count update')\n  //     prevCountRef.current = count\n  // }, [count]);\n\n  // const handleClick = () => {\n  //     setCount(count + 1)\n  // }\n\n  // return (\n  //     <div>\n  //         <h1>UseRef Hook</h1>\n  //         <p>Count: {count}</p>\n  //         <p>prevCount: {prevCountRef.current}</p>\n  //         <button onClick={handleClick}>Increment</button>\n  //     </div>\n  // )\n\n  const [time, setTime] = useState(0);\n  let timeRef = useRef(null);\n  const handleStart = () => {\n    timeRef.current = setInterval(() => {\n      setTime(time => time + 1);\n    }, 1000);\n  };\n  const handleStop = () => {\n    clearInterval(timeRef.current);\n    timeRef.current = null;\n  };\n  const handleReset = () => {\n    handleStop();\n    setTime(0);\n  };\n  return (\n    /*#__PURE__*/\n    // <div>\n    //     <h2>Time countdown: {time} seconds</h2>\n    //     <button onClick={handleStart}>Start</button>\n    //     <button onClick={handleStop}>Stop</button>\n    //     <button onClick={handleReset}>Reset</button>\n    // </div>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Timer: \", time, \" second\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStart,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStop,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: han\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(UseRefHook, \"lFA4DD2oxVfT8OajtuyO2C2LtDs=\");\n_c = UseRefHook;\nexport default UseRefHook;\nvar _c;\n$RefreshReg$(_c, \"UseRefHook\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","UseRefHook","_s","time","setTime","timeRef","handleStart","current","setInterval","handleStop","clearInterval","handleReset","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","han","_c","$RefreshReg$"],"sources":["/Users/krupachovatiya/Desktop/react/my_app/src/UseRefHook.js"],"sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\n\nconst UseRefHook = () => {\n    // let inputRef = useRef(null)\n\n    // const handleClick = () => {\n    //     console.log('useRef call')\n\n    //     inputRef.current.value = '1000'\n        // inputRef.current.focus()\n        // inputRef.current.style.color = 'red'\n        // inputRef.current.style.display = 'none'\n    // }\n\n    // return (\n    //     <div>\n    //         <input type='text' ref={inputRef}/>\n    //         <button onClick={handleClick}>Update</button>\n    //     </div>\n    // )\n\n\n\n    // const [count, setCount] = useState(0);\n    // let prevCountRef = useRef()\n\n    // useEffect(() => {\n    //     console.log('count update')\n    //     prevCountRef.current = count\n    // }, [count]);\n\n    // const handleClick = () => {\n    //     setCount(count + 1)\n    // }\n\n    // return (\n    //     <div>\n    //         <h1>UseRef Hook</h1>\n    //         <p>Count: {count}</p>\n    //         <p>prevCount: {prevCountRef.current}</p>\n    //         <button onClick={handleClick}>Increment</button>\n    //     </div>\n    // )\n\n\n    const [time, setTime] = useState(0)\n\n    let timeRef = useRef(null)\n\n    const handleStart = () => {\n        timeRef.current = setInterval(() => {\n            setTime(time => time + 1)\n        }, 1000);\n    }\n\n    const handleStop = () => {\n        clearInterval(timeRef.current)\n        timeRef.current = null\n    }\n\n    const handleReset = () => {\n        handleStop()\n        setTime(0)\n    }\n\n    return (\n        // <div>\n        //     <h2>Time countdown: {time} seconds</h2>\n        //     <button onClick={handleStart}>Start</button>\n        //     <button onClick={handleStop}>Stop</button>\n        //     <button onClick={handleReset}>Reset</button>\n        // </div>\n\n        <div>\n            <h2>Timer: {time} second</h2>\n            <button onClick={handleStart}>Start</button>\n            <button onClick={handleStop}>Stop</button>\n            <button onClick={han}></button>\n        </div>\n    )\n}\n\nexport default UseRefHook"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;;EAEA;EACA;;EAEA;EACI;EACA;EACA;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAIA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEnC,IAAIS,OAAO,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE1B,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACtBD,OAAO,CAACE,OAAO,GAAGC,WAAW,CAAC,MAAM;MAChCJ,OAAO,CAACD,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IAC7B,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;EAED,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACrBC,aAAa,CAACL,OAAO,CAACE,OAAO,CAAC;IAC9BF,OAAO,CAACE,OAAO,GAAG,IAAI;EAC1B,CAAC;EAED,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACtBF,UAAU,CAAC,CAAC;IACZL,OAAO,CAAC,CAAC,CAAC;EACd,CAAC;EAED;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IAEAJ,OAAA;MAAAY,QAAA,gBACIZ,OAAA;QAAAY,QAAA,GAAI,SAAO,EAACT,IAAI,EAAC,SAAO;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BhB,OAAA;QAAQiB,OAAO,EAAEX,WAAY;QAAAM,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5ChB,OAAA;QAAQiB,OAAO,EAAER,UAAW;QAAAG,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1ChB,OAAA;QAAQiB,OAAO,EAAEC;MAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B;EAAC;AAEd,CAAC;AAAAd,EAAA,CA9EKD,UAAU;AAAAkB,EAAA,GAAVlB,UAAU;AAgFhB,eAAeA,UAAU;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}