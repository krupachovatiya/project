{"ast":null,"code":"var _jsxFileName = \"/Users/krupachovatiya/Desktop/React-Project/react/my_app/src/UseRefHook.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UseRefHook = () => {\n  _s();\n  // let inputRef = useRef(null)\n\n  // const handleClick = () => {\n  //     console.log('useRef call')\n\n  //     inputRef.current.value = '1000'\n  // inputRef.current.focus()\n  // inputRef.current.style.color = 'red'\n  // inputRef.current.style.display = 'none'\n  // }\n\n  // return (\n  //     <div>\n  //         <input type='text' ref={inputRef}/>\n  //         <button onClick={handleClick}>Update</button>\n  //     </div>\n  // )\n\n  const [count, setCount] = useState(0);\n  let prevCountRef = useRef();\n  useEffect(() => {\n    console.log('Count', count);\n    console.log('Previous count', prevCountRef.current);\n    prevCountRef.current = count;\n  }, [count]);\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n\n  // return (\n  //     <div>\n  //         <h1>UseRef Hook</h1>\n  //         <p>Count: {count}</p>\n  //         <p>prevCount: {prevCountRef.current}</p>\n  //         <button onClick={handleClick}>Increment</button>\n  //     </div>\n  // )\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n\n  // const [time, setTime] = useState(0)\n\n  // let timeRef = useRef(null)\n\n  // const handleStart = () => {\n  //     timeRef.current = setInterval(() => {\n  //         setTime(time => time + 1)\n  //     }, 1000);\n  // }\n\n  // const handleStop = () => {\n  //     clearInterval(timeRef.current)\n  //     timeRef.current = null\n  // }\n\n  // const handleReset = () => {\n  //     handleStop()\n  //     setTime(0)\n  // }\n\n  // return (\n  //     <div>\n  //         <h2>Timer: {time} second</h2>\n  //         <button onClick={handleStart}>Start</button>\n  //         <button onClick={handleStop}>Stop</button>\n  //         <button onClick={handleReset}>Reset</button>\n  //     </div>\n  // )\n};\n_s(UseRefHook, \"ASxKwvowIOcjCsM7q0Ue0R+dvXc=\");\n_c = UseRefHook;\nexport default UseRefHook;\nvar _c;\n$RefreshReg$(_c, \"UseRefHook\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Fragment","_Fragment","jsxDEV","_jsxDEV","UseRefHook","_s","count","setCount","prevCountRef","console","log","current","handleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krupachovatiya/Desktop/React-Project/react/my_app/src/UseRefHook.js"],"sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\n\nconst UseRefHook = () => {\n    // let inputRef = useRef(null)\n\n    // const handleClick = () => {\n    //     console.log('useRef call')\n\n    //     inputRef.current.value = '1000'\n        // inputRef.current.focus()\n        // inputRef.current.style.color = 'red'\n        // inputRef.current.style.display = 'none'\n    // }\n\n    // return (\n    //     <div>\n    //         <input type='text' ref={inputRef}/>\n    //         <button onClick={handleClick}>Update</button>\n    //     </div>\n    // )\n\n\n\n    const [count, setCount] = useState(0);\n    let prevCountRef = useRef()\n\n    useEffect(() => {\n        console.log('Count', count);\n        console.log('Previous count', prevCountRef.current);\n        prevCountRef.current = count\n    }, [count])\n\n    const handleClick = () => {\n        setCount(count + 1)\n    }\n\n    // return (\n    //     <div>\n    //         <h1>UseRef Hook</h1>\n    //         <p>Count: {count}</p>\n    //         <p>prevCount: {prevCountRef.current}</p>\n    //         <button onClick={handleClick}>Increment</button>\n    //     </div>\n    // )\n\n    return (\n        <div>\n            <></>\n        </div>\n    )\n\n\n    // const [time, setTime] = useState(0)\n\n    // let timeRef = useRef(null)\n\n    // const handleStart = () => {\n    //     timeRef.current = setInterval(() => {\n    //         setTime(time => time + 1)\n    //     }, 1000);\n    // }\n\n    // const handleStop = () => {\n    //     clearInterval(timeRef.current)\n    //     timeRef.current = null\n    // }\n\n    // const handleReset = () => {\n    //     handleStop()\n    //     setTime(0)\n    // }\n\n    // return (\n    //     <div>\n    //         <h2>Timer: {time} second</h2>\n    //         <button onClick={handleStart}>Start</button>\n    //         <button onClick={handleStop}>Stop</button>\n    //         <button onClick={handleReset}>Reset</button>\n    //     </div>\n    // )\n}\n\nexport default UseRefHook"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;;EAEA;EACA;;EAEA;EACI;EACA;EACA;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAIA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrC,IAAIW,YAAY,GAAGT,MAAM,CAAC,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACZW,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEJ,KAAK,CAAC;IAC3BG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,YAAY,CAACG,OAAO,CAAC;IACnDH,YAAY,CAACG,OAAO,GAAGL,KAAK;EAChC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACtBL,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACvB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIH,OAAA;IAAAU,QAAA,eACIV,OAAA,CAAAF,SAAA,mBAAI;EAAC;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;;EAIV;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;AAAAZ,EAAA,CA9EKD,UAAU;AAAAc,EAAA,GAAVd,UAAU;AAgFhB,eAAeA,UAAU;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}